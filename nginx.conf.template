events {
    worker_connections 1024;
}

http {
    # Custom log format with pool, release, upstream status, and timing
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'pool=$upstream_http_x_app_pool '
                       'release=$upstream_http_x_release_id '
                       'upstream_status=$upstream_status '
                       'upstream=$upstream_addr '
                       'request_time=$request_time '
                       'upstream_response_time=$upstream_response_time';

    # Log to actual file (not stdout) so watcher can tail it
    access_log /var/log/nginx/access_detailed.log detailed;
    # Keep stdout logging for docker logs command
    access_log /dev/stdout;

    # Upstream configuration for Blue/Green deployment
    upstream backend {
        # Active pool determined by ACTIVE_POOL env var
        # Primary server - will be replaced by envsubst
        server app_${ACTIVE_POOL}:3000 max_fails=1 fail_timeout=5s;
        
        # Backup server - will be replaced by envsubst  
        server app_${BACKUP_POOL}:3000 backup;
    }

    server {
        listen 80;
        server_name localhost;

        # Proxy settings to forward headers and handle failover
        location / {
            # Failover configuration - retry on errors, timeouts, and 5xx
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;

            # Tight timeouts for quick failure detection
            proxy_connect_timeout 2s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;

            # Forward original client information
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Pass to upstream
            proxy_pass http://backend;

            # Preserve upstream response headers (don't strip app headers)
            proxy_pass_request_headers on;
        }

        # Health check endpoint for Nginx itself
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
